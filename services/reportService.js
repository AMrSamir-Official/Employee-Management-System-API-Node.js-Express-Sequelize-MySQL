const createCsvWriter = require("csv-writer").createObjectCsvWriter
const PDFDocument = require("pdfkit")
const { Employee, Department } = require("../models")
const path = require("path")
const fs = require("fs")

class ReportService {
  async getEmployeesForExport(departmentId = null) {
    const whereClause = {}
    if (departmentId) {
      whereClause.department_id = departmentId
    }

    return await Employee.findAll({
      where: whereClause,
      include: [
        {
          model: Department,
          as: "department",
          attributes: ["name"],
        },
      ],
      order: [["name", "ASC"]],
    })
  }

  async generateCSV(departmentId = null) {
    try {
      const employees = await this.getEmployeesForExport(departmentId)

      // Create temporary file path
      const tempDir = path.join(__dirname, "../temp")
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir)
      }

      const csvFilePath = path.join(tempDir, `employees_${Date.now()}.csv`)

      const csvWriter = createCsvWriter({
        path: csvFilePath,
        header: [
          { id: "id", title: "ID" },
          { id: "name", title: "Name" },
          { id: "email", title: "Email" },
          { id: "salary", title: "Salary" },
          { id: "department_name", title: "Department" },
          { id: "hire_date", title: "Hire Date" },
          { id: "created_at", title: "Created At" },
        ],
      })

      const records = employees.map((emp) => ({
        id: emp.id,
        name: emp.name,
        email: emp.email,
        salary: emp.salary,
        department_name: emp.department ? emp.department.name : "N/A",
        hire_date: emp.hire_date ? emp.hire_date.toISOString().split("T")[0] : "N/A",
        created_at: emp.created_at.toISOString().split("T")[0],
      }))

      await csvWriter.writeRecords(records)

      // Read file and return buffer
      const csvBuffer = fs.readFileSync(csvFilePath)

      // Clean up temp file
      fs.unlinkSync(csvFilePath)

      return csvBuffer
    } catch (error) {
      throw new Error(`CSV generation failed: ${error.message}`)
    }
  }

  async generatePDF(departmentId = null) {
    try {
      const employees = await this.getEmployeesForExport(departmentId)

      return new Promise((resolve, reject) => {
        const doc = new PDFDocument({ margin: 50 })
        const buffers = []

        doc.on("data", buffers.push.bind(buffers))
        doc.on("end", () => {
          const pdfBuffer = Buffer.concat(buffers)
          resolve(pdfBuffer)
        })

        // Header
        doc.fontSize(20).text("Employee Report", { align: "center" })
        doc.moveDown()

        if (departmentId) {
          const deptName = employees.length > 0 ? employees[0].department.name : "Unknown"
          doc.fontSize(14).text(`Department: ${deptName}`, { align: "center" })
          doc.moveDown()
        }

        doc.fontSize(12).text(`Generated on: ${new Date().toLocaleDateString()}`, { align: "center" })
        doc.text(`Total Employees: ${employees.length}`, { align: "center" })
        doc.moveDown(2)

        // Table headers
        const startX = 50
        let currentY = doc.y

        doc.fontSize(10)
        doc.text("ID", startX, currentY, { width: 30 })
        doc.text("Name", startX + 35, currentY, { width: 100 })
        doc.text("Email", startX + 140, currentY, { width: 120 })
        doc.text("Salary", startX + 265, currentY, { width: 70 })
        doc.text("Department", startX + 340, currentY, { width: 100 })

        // Draw line under headers
        currentY += 15
        doc
          .moveTo(startX, currentY)
          .lineTo(startX + 440, currentY)
          .stroke()
        currentY += 10

        // Employee data
        employees.forEach((emp, index) => {
          if (currentY > 700) {
            // New page if needed
            doc.addPage()
            currentY = 50
          }

          doc.text(emp.id.toString(), startX, currentY, { width: 30 })
          doc.text(emp.name, startX + 35, currentY, { width: 100 })
          doc.text(emp.email, startX + 140, currentY, { width: 120 })
          doc.text(`$${Number.parseFloat(emp.salary).toLocaleString()}`, startX + 265, currentY, { width: 70 })
          doc.text(emp.department ? emp.department.name : "N/A", startX + 340, currentY, { width: 100 })

          currentY += 20

          // Draw separator line every 5 rows
          if ((index + 1) % 5 === 0) {
            doc
              .moveTo(startX, currentY - 5)
              .lineTo(startX + 440, currentY - 5)
              .stroke()
          }
        })

        // Footer
        doc
          .fontSize(8)
          .text(
            `Report generated by Employee Management System - Page ${doc.bufferedPageRange().count}`,
            startX,
            doc.page.height - 50,
            { align: "center" },
          )

        doc.end()
      })
    } catch (error) {
      throw new Error(`PDF generation failed: ${error.message}`)
    }
  }
}

module.exports = new ReportService()
